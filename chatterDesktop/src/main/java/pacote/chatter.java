/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pacote;

import java.awt.BorderLayout;
import java.rmi.Naming;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

/**
 *
 * @author kemily
 */
public class chatter extends javax.swing.JFrame {

    private String name;
    private String color;

    public chatter(String name, String color) {
        initComponents();
        this.name = name;
        this.color = color;
        jLabel1.setText(name);
        System.out.print(name);
        System.out.print("/"+color);
        loadMessages();
        
        Timer timer = new Timer(3000, e -> loadMessages());
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textMsg = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        select = new javax.swing.JComboBox<>();
        send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("User");

        jLabel2.setText("Message:");

        textMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textMsgActionPerformed(evt);
            }
        });

        jLabel3.setText("Action");

        select.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fala", "Grita", "Sussura" }));

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMsg(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(101, 101, 101)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(send)
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(select, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(send)
                        .addGap(17, 17, 17))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textMsgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textMsgActionPerformed

    public void loadMessages() {
    try {
        String messages = "";
        try {
            rmiDesktopInterface objRmi = (rmiDesktopInterface) java.rmi.server.RemoteObject.toStub(Naming.lookup("rmi://127.0.0.1:7775/ServidorChatterDesktop")); // Ao conectar servidor e cliente em diferentes dispositivos é necessario mudar para o IP do servidor
            messages = objRmi.showMessagesDesk();
        } catch(Exception e) {
            System.out.print("Erro no servidor ao recuperar mensagens: " + e.getMessage());
            e.printStackTrace();
        }

        String[] lines = messages.split(";"); // Quebra corretamente as mensagens

        JPanel messagesPanel = new JPanel();
        messagesPanel.setLayout(new BoxLayout(messagesPanel, BoxLayout.Y_AXIS)); // Define layout vertical

        for (String msg : lines) {
            System.out.println(msg);
            JPanel msgPanel = new JPanel();
            msgPanel.setLayout(new BorderLayout());
            msgPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

            JLabel msgLabel = new JLabel(msg);
            msgPanel.add(msgLabel, BorderLayout.WEST);
            messagesPanel.add(msgPanel); // Adiciona cada mensagem separadamente
        }

        jScrollPane1.setViewportView(messagesPanel);
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
        jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getMaximum());

        // Mantém o scroll sempre na última mensagem
        SwingUtilities.invokeLater(() -> jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getMaximum()));

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erro ao carregar mensagens", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

    
    private void sendMsg(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMsg
        // TODO add your handling code here:
        
        String talker = this.name + " (";
        String action = select.getSelectedItem().toString();
        talker += action + ")";
        String msg = textMsg.getText();
        String webMsg = "<div class='msg'><img class='profile' src='./images/profiles/comp.svg'/><div class='card'><h1 class='" + this.color + "Title'>" + talker + "</h1><p class='" + this.color + "Text'>" + msg + "</p></div></div>";
        String deskMsg = "[" + this.name + " (" + action + ")]: " + msg + ";";

        
        try{
            rmiDesktopInterface objRmi = (rmiDesktopInterface) java.rmi.server.RemoteObject.toStub(Naming.lookup("rmi://127.0.0.1:7775/ServidorChatterDesktop"));if(!objRmi.sendMessage(webMsg, deskMsg)){ // Ao conectar servidor e cliente em diferentes dispositivos é necessario mudar para o IP do servidor
                System.out.print("Error: Couldn't send message.");
            }
        } catch(Exception e){
            System.out.print("Error: Server error" + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_sendMsg

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new chatter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> select;
    private javax.swing.JButton send;
    private javax.swing.JTextField textMsg;
    // End of variables declaration//GEN-END:variables
}
